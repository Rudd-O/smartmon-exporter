#!/usr/bin/python3

import collections
import http.server
import glob
import io
import logging
import os
import shutil
import socket
import socketserver
import subprocess
import sys
import time
import threading


smartmon_prog = r'''#!/bin/bash
# Script informed by the collectd monitoring script for smartmontools (using smartctl)
# by Samuel B. <samuel_._behan_(at)_dob_._sk> (c) 2012
# source at: http://devel.dob.sk/collectd-scripts/

# TODO: This probably needs to be a little more complex.  The raw numbers can have more
#       data in them than you'd think.
#       http://arstechnica.com/civis/viewtopic.php?p=22062211

# Formatting done via shfmt -i 2
# https://github.com/mvdan/sh

parse_smartctl_attributes_awk="$(
  cat <<'SMARTCTLAWK'
$1 ~ /^ *[0-9]+$/ && $2 ~ /^[a-zA-Z0-9_-]+$/ {
  gsub(/-/, "_");
  printf "%s_value{%s,smart_id=\"%s\"} %d\n", $2, labels, $1, $4
  printf "%s_worst{%s,smart_id=\"%s\"} %d\n", $2, labels, $1, $5
  printf "%s_threshold{%s,smart_id=\"%s\"} %d\n", $2, labels, $1, $6
  printf "%s_raw_value{%s,smart_id=\"%s\"} %e\n", $2, labels, $1, $10
}
SMARTCTLAWK
)"

smartmon_attrs="$(
  cat <<'SMARTMONATTRS'
airflow_temperature_cel
command_timeout
current_pending_sector
end_to_end_error
erase_fail_count
g_sense_error_rate
hardware_ecc_recovered
host_reads_mib
host_reads_32mib
host_writes_mib
host_writes_32mib
load_cycle_count
media_wearout_indicator
wear_leveling_count
nand_writes_1gib
offline_uncorrectable
power_cycle_count
power_on_hours
program_fail_count
raw_read_error_rate
reallocated_sector_ct
reported_uncorrect
sata_downshift_count
spin_retry_count
spin_up_time
start_stop_count
temperature_case
temperature_celsius
temperature_internal
total_lbas_read
total_lbas_written
udma_crc_error_count
unsafe_shutdown_count
workld_host_reads_perc
workld_media_wear_indic
workload_minutes
SMARTMONATTRS
)"
smartmon_attrs="$(echo ${smartmon_attrs} | xargs | tr ' ' '|')"

parse_smartctl_attributes() {
  local disk="$1"
  local diskb=$(basename "$disk")
  local disk_type="$2"
  local labels="device=\"${diskb}\",type=\"${disk_type}\""
  local vars="$(echo "${smartmon_attrs}" | xargs | tr ' ' '|')"
  sed 's/^ \+//g' |
    awk -v labels="${labels}" "${parse_smartctl_attributes_awk}" 2>/dev/null |
    tr A-Z a-z |
    grep -E "(${smartmon_attrs})"
}

parse_smartctl_scsi_attributes() {
  local disk="$1"
  local diskb=$(basename "$disk")
  local disk_type="$2"
  local labels="device=\"${diskb}\",type=\"${disk_type}\""
  while read line; do
    attr_type="$(echo "${line}" | tr '=' ':' | cut -f1 -d: | sed 's/^ \+//g' | tr ' ' '_')"
    attr_value="$(echo "${line}" | tr '=' ':' | cut -f2 -d: | sed 's/^ \+//g')"
    case "${attr_type}" in
    number_of_hours_powered_up_) power_on="$(echo "${attr_value}" | awk '{ printf "%e\n", $1 }')" ;;
    Current_Drive_Temperature) temp_cel="$(echo ${attr_value} | cut -f1 -d' ' | awk '{ printf "%e\n", $1 }')" ;;
    Blocks_read_from_cache_and_sent_to_initiator_) lbas_read="$(echo ${attr_value} | awk '{ printf "%e\n", $1 }')" ;;
    Accumulated_start-stop_cycles) power_cycle="$(echo ${attr_value} | awk '{ printf "%e\n", $1 }')" ;;
    Elements_in_grown_defect_list) grown_defects="$(echo ${attr_value} | awk '{ printf "%e\n", $1 }')" ;;
    esac
  done
  [ ! -z "$power_on" ] && echo "power_on_hours_raw_value{${labels},smart_id=\"9\"} ${power_on}"
  [ ! -z "$temp_cel" ] && echo "temperature_celsius_raw_value{${labels},smart_id=\"194\"} ${temp_cel}"
  [ ! -z "$lbas_read" ] && echo "total_lbas_read_raw_value{${labels},smart_id=\"242\"} ${lbas_read}"
  [ ! -z "$power_cycle" ] && echo "power_cycle_count_raw_value{${labels},smart_id=\"12\"} ${power_cycle}"
  [ ! -z "$grown_defects" ] && echo "grown_defects_count_raw_value{${labels},smart_id=\"12\"} ${grown_defects}"
}

parse_smartctl_info() {
  local -i smart_available=0 smart_enabled=0 smart_healthy=0
  local disk="$1" disk_type="$2"
  local diskb=$(basename "$disk")
  local model_family='' device_model='' serial_number='' fw_version='' vendor='' product='' revision='' lun_id=''
  while read line; do
    info_type="$(echo "${line}" | cut -f1 -d: | tr ' ' '_')"
    info_value="$(echo "${line}" | cut -f2- -d: | sed 's/^ \+//g' | sed 's/"/\\"/')"
    case "${info_type}" in
    Model_Family) model_family="${info_value}" ;;
    Device_Model) device_model="${info_value}" ;;
    Serial_Number) serial_number="${info_value}" ;;
    Firmware_Version) fw_version="${info_value}" ;;
    Vendor) vendor="${info_value}" ;;
    Product) product="${info_value}" ;;
    Revision) revision="${info_value}" ;;
    Logical_Unit_id) lun_id="${info_value}" ;;
    esac
    if [[ "${info_type}" == 'SMART_support_is' ]]; then
      case "${info_value:0:7}" in
      Enabled) smart_enabled=1 ;;
      Availab) smart_available=1 ;;
      Unavail) smart_available=0 ;;
      esac
    fi
    if [[ "${info_type}" == 'SMART_overall-health_self-assessment_test_result' ]]; then
      case "${info_value:0:6}" in
      PASSED) smart_healthy=1 ;;
      esac
    elif [[ "${info_type}" == 'SMART_Health_Status' ]]; then
      case "${info_value:0:2}" in
      OK) smart_healthy=1 ;;
      esac
    fi
  done
  echo "device_info{device=\"${diskb}\",type=\"${disk_type}\",vendor=\"${vendor}\",product=\"${product}\",revision=\"${revision}\",lun_id=\"${lun_id}\",model_family=\"${model_family}\",device_model=\"${device_model}\",serial_number=\"${serial_number}\",firmware_version=\"${fw_version}\"} 1"
  echo "device_smart_available{device=\"${diskb}\",type=\"${disk_type}\"} ${smart_available}"
  echo "device_smart_enabled{device=\"${diskb}\",type=\"${disk_type}\"} ${smart_enabled}"
  echo "device_smart_healthy{device=\"${diskb}\",type=\"${disk_type}\"} ${smart_healthy}"
}

output_format_awk="$(
  cat <<'OUTPUTAWK'
BEGIN { v = "" }
v != $1 {
  print "# HELP smartmon_" $1 " SMART metric " $1;
  print "# TYPE smartmon_" $1 " gauge";
  v = $1
}
{print "smartmon_" $0}
OUTPUTAWK
)"

format_output() {
  sort |
    awk -F'{' "${output_format_awk}"
}

# smartctl_version="$(/usr/sbin/smartctl -V | head -n1 | awk '$1 == "smartctl" {print $2}')"
# echo "smartctl_version{version=\"${smartctl_version}\"} 1" | format_output | format_output
# if [[ "$(expr "${smartctl_version}" : '\([0-9]*\)\..*')" -lt 6 ]]; then
#   exit
# fi

device_list="$(/usr/sbin/smartctl --scan-open -n standby | awk '/^\/dev/{print $1 "|" $3}')"

do_drive() {
  local disk=$1
  diskb=$(basename "$disk")
  local type=$2

  echo "smartctl_run{device=\"${diskb}\",type=\"${type}\"}" "$(TZ=UTC date '+%s')" | format_output
  # Get the SMART information and health.
  out=$(/usr/sbin/smartctl -i -H -d "${type}" "${disk}")
  ret=$?
  echo "smartctl_return_code{device=\"${diskb}\",type=\"${type}\"}" "$ret" | format_output
  echo "$out" | parse_smartctl_info "${diskb}" "${type}" | format_output
  echo "# Fetching attributes for disk ${diskb} of type ${type}."
  # Get the SMART attributes
  case ${type} in
  sat) /usr/sbin/smartctl -A -d "${type}" "${disk}" | parse_smartctl_attributes "${diskb}" "${type}" | format_output ;;
  sat+megaraid*) /usr/sbin/smartctl -A -d "${type}" "${disk}" | parse_smartctl_attributes "${diskb}" "${type}" | format_output ;;
  scsi) /usr/sbin/smartctl -A -d "${type}" "${disk}" | parse_smartctl_scsi_attributes "${diskb}" "${type}" | format_output ;;
  megaraid*) /usr/sbin/smartctl -A -d "${type}" "${disk}" | parse_smartctl_scsi_attributes "${diskb}" "${type}" | format_output ;;
  *)
    echo "# disk type is not sat, scsi or megaraid but ${type}"
    return
    ;;
  esac
  echo "smartctl_all_attributes_run{device=\"${diskb}\",type=\"${type}\"}" "$(TZ=UTC date '+%s')" | format_output
}

disk="$0"
type="$1"

do_drive ${disk} ${type}
'''


logging.basicConfig(level=logging.INFO)


cache = None
cache_timeout = 0
cache_lock = threading.Lock()


def is_standby(device):
    out = subprocess.check_output(['/usr/sbin/hdparm', '-C', device], universal_newlines=True)
    logging.debug(out)
    idle = "drive state is:  standby" in out
    if idle:
        logging.debug("Device %s is in standby.", device)
    else:
        logging.debug("Device %s is active.", device)
    return idle


old_devlist = None
old_device_list = None
def get_device_list():
    global old_devlist, old_device_list

    devlist = glob.glob("/dev/sd?")
    if old_devlist == devlist:
        # Prevent scan since nothing has changed.
        logging.debug("Eliding disk scan.")
        return old_device_list
    logging.debug("Scanning device list %s", devlist)

    logging.debug("Asking smartctl to scan devices.")
    device_list = [
        x.strip().split("|")
        for x in
        subprocess.check_output([
            'bash', '-c',
            ''' /usr/sbin/smartctl --scan-open -n standby | awk '/^\/dev/{print $1 "|" $3}' '''
        ]).decode("utf-8").splitlines()
        if x.strip()
    ]
    old_devlist = devlist
    old_device_list = device_list
    logging.debug("New device list: %s", device_list)
    return device_list


class SimplePromHandler(http.server.BaseHTTPRequestHandler):

    def handle_non_metrics(self):
        if self.path == "/":
            self.send_response(200)
            self.send_header('Content-Type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write(
                ("<html><body>%s exporter.  "
                "<a href='/metrics'>Metrics.</a>"
                "<body></html>" % os.path.basename(__file__)).encode("utf-8")
            )
            return True
        elif self.path != "/metrics":
            self.send_response(404)
            self.end_headers()
            return True

    def log_request(code='-', size='-'):
        pass

    def do_GET(self):
        if self.handle_non_metrics():
            return

        try:
            global cache_lock, cache, cache_timeout
            with cache_lock:
                if cache is None:
                    logging.debug("Initializing cache.")
                    cache = {}
                threads = []
                outputs_lock = threading.Lock()
                outputs = []
                def output(o):
                    with outputs_lock:
                        outputs.append(o)
                device_list = get_device_list()
                output("smartmon_total_device_count %s\n" % len(device_list))
                for device, type_ in device_list:
                    device_path, device = device, os.path.basename(device)
                    idle = is_standby(device_path)
                    output("smartmon_disk_standby{device=\"%s\",type=\"%s\"} %s\n" % (device, type_, int(idle)))
                    if cache.get(device_path) and (idle or (cache_timeout > (time.time() - cache[device_path][0]))):
                        #print("Running %s from the cache" % device, file=sys.stderr)
                        #sys.stderr.flush()
                        logging.debug("Device %s is idle or metrics cache is not expired.  Using cache.", device_path)
                        cache_age = (time.time() - cache[device_path][0])
                        output("smartmon_cache_age_seconds{device=\"%s\",type=\"%s\"} %s\n" % (device, type_, cache_age))
                        output("smartmon_data_from_cache{device=\"%s\",type=\"%s\"} %s\n" % (device, type_, 1))
                        outputs.append(cache[device_path][1])
                    else:
                        def do_device(dev, typ):
                            logging.debug("Device %s is active or metrics cache is expired.  Retrieving metrics.", dev)
                            cmd = ['bash', '-c', smartmon_prog, dev, typ]
                            o = subprocess.check_output(cmd)
                            cache[dev] = [time.time(), o]
                            output("smartmon_cache_age_seconds{device=\"%s\",type=\"%s\"} %s\n" % (dev, typ, 0))
                            output("smartmon_data_from_cache{device=\"%s\",type=\"%s\"} %s\n" % (dev, typ, 0))
                            output(cache[dev][1])
                            logging.debug("Finished retrieving metrics from device %s.", dev)
                        threads.append(threading.Thread(target=do_device, args=(device_path, type_)))
                        threads[-1].start()
                for t in threads:
                    t.join()
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8')
            self.end_headers()
            for o in outputs:
                if hasattr(o, "encode"):
                    o = o.encode("utf-8")
                try:
                    self.wfile.write(o)
                except TypeError:
                    assert 0, o
        except subprocess.CalledProcessError:
            self.send_response(500)


if len(sys.argv) == 1:
    print(get_device_list())
    for dev, typ in get_device_list():
        print(dev, is_standby(dev))
        print(subprocess.check_output(['bash', '-xc', smartmon_prog, dev, typ]).decode('utf-8'))
else:
    server = http.server.HTTPServer(('', int(sys.argv[1])), SimplePromHandler)
    cache_timeout = int(sys.argv[2])
    logging.info("Serving on TCP port %s", sys.argv[1])
    server.serve_forever()
